// MongoDB Playground
// Use Ctrl+Space inside a snippet or a string literal to trigger completions.

// BD name
const database = 'equipo-rocket-db';

// The current database to use.
use(database);

// users collection

let collection = 'Users';

// Drop users collection
db.getCollection(collection).drop();

// Create a users collection
db.createCollection(collection, {
  validator: {
    $jsonSchema: {
      required: ['email', 'documentId', 'name', 'lastName', 'fullName', 'role', 'status'],
      properties: {
        email: {
          bsonType: 'string',
          pattern: '^[a-z0-9+_.-]+@[a-z0-9.-]+$'
        },
        documentId: {
          bsonType: 'long',
        },
        name: {
          bsonType: 'string'
        },
        lastName: {
          bsonType: 'string'
        },
        fullName: {
          bsonType: 'string'
        },
        role: {
          enum: ["admin", "leader", "student"]
        },
        status: {
          enum: ["pending", "authorized", "unauthorized"]
        },
        password: {
          bsonType: 'string'
        }
      }
    }
  }
});

// Create unique index for email and documentId
db.getCollection(collection).createIndex({ email: 1 }, { unique: true });
db.getCollection(collection).createIndex({ documentId: 1 }, { unique: true });

const users = [
  {
    "email": "juanfelipegarciagil7@gmail.com",
    "documentId": Long('111'),
    "name": "Felipe",
    "lastName": "Garcia",
    "fullName": "Felipe Garcia",
    "role": "admin",
    "status": "pending",
    "password": "1234"
  },
  {
    "email": "jlarboleda2@misena.edu.co",
    "documentId": Long('222'),
    "name": "Jorge",
    "lastName": "Arboleda",
    "fullName": "Jorge Arboleda",
    "role": "student",
    "status": "pending",
    "password": "1324"
  },
  {
    "email": "gohan44marin@gmail.com",
    "documentId": Long('333'),
    "name": "Jhonatan ",
    "lastName": "Marin",
    "fullName": "Jhonatan Marin",
    "role": "leader",
    "status": "pending",
    "password": "1234"
  },
  {
    "email": "j.felipe.co.98@gmail.com",
    "documentId": Long('444'),
    "name": "Jhoan",
    "lastName": "Cortés",
    "fullName": "Jhoan Cortés",
    "role": "student",
    "status": "pending",
    "password": "1234"
  },
  {
    "email": "ederperezgarcia@gmail.com",
    "documentId": Long('555'),
    "name": "Eder",
    "lastName": "Perez",
    "fullName": "Eder Perez",
    "role": "leader",
    "status": "pending",
    "password": "1234"
  },
  {
    "email": "omarramirez5876@gmail.com",
    "documentId": Long('666'),
    "name": "Omar",
    "lastName": "Ramirez",
    "fullName": "Omar Ramirez",
    "role": "leader",
    "status": "pending",
    "password": "1234"
  }
];

// Insert users
db.getCollection(collection).insertMany(users);

// projects collection

collection = 'Projects';

// Drop projects collections
db.getCollection(collection).drop();

// Create projects collection
db.createCollection(collection, {
  validator: {
    $jsonSchema: {
      required: ['name', 'generalObjective', 'specificObjectives', 'budget', 'startDate', 'endDate', 'leader_id', 'status'],
      properties: {
        name: {
          bsonType: 'string',
        },
        generalObjective: {
          bsonType: 'string'
        },
        specificObjectives: {
          bsonType: 'array'
        },
        budget: {
          bsonType: 'decimal'
        },
        startDate: {
          bsonType: 'date'
        },
        endDate: {
          bsonType: 'date'
        },
        leader_id: {
          bsonType: 'objectId'
        },
        status: {
          enum: ['active', 'inactive']
        },
        phase: {
          enum: ['started', 'in progress', 'ended']
        }
      }
    }
  }
});

const projects = [
  {
    "name": "Proyecto 1",
    "generalObjective": "Objetivo general",
    "specificObjectives": ["Objetivo especifico 1", "Objetivo especifico 2"],
    "budget": Decimal128('1800000'),
    "startDate": new Date(),
    "endDate": new Date(new Date().getTime() + 60*24*60*60000),
    "leader_id": db.Users.findOne({email: 'gohan44marin@gmail.com'})._id,
    "status": "inactive",
  },
  {
    "name": "Proyecto 2",
    "generalObjective": "Objetivo general",
    "specificObjectives": ["Objetivo especifico 1", "Objetivo especifico 2"],
    "budget": Decimal128('30000000'),
    "startDate": new Date(),
    "endDate": new Date(new Date().getTime() + 60*24*60*60000),
    "leader_id": db.Users.findOne({email: 'gohan44marin@gmail.com'})._id,
    "status": "inactive",
  },
  {
    "name": "Proyecto 3",
    "generalObjective": "Objetivo general",
    "specificObjectives": ["Objetivo especifico 1", "Objetivo especifico 2"],
    "budget": Decimal128('49500000'),
    "startDate": new Date(),
    "endDate": new Date(new Date().getTime() + 60*24*60*60000),
    "leader_id": db.Users.findOne({email: 'ederperezgarcia@gmail.com'})._id,
    "status": "inactive",
  },
  {
    "name": "Proyecto 4",
    "generalObjective": "Objetivo general",
    "specificObjectives": ["Objetivo especifico 1", "Objetivo especifico 2"],
    "budget": Decimal128('13400000'),
    "startDate": new Date(),
    "endDate": new Date(new Date().getTime() + 60*24*60*60000),
    "leader_id": db.Users.findOne({email: 'omarramirez5876@gmail.com'})._id,
    "status": "inactive",
  }
];

// Insert projects
db.getCollection(collection).insertMany(projects);

// enrollments collection

collection = 'Enrollments';

// Drop enrollments collection
db.getCollection(collection).drop();

db.createCollection(collection, {
  validator: {
    $jsonSchema: {
      required: ['project_id', 'user_id'],
      properties: {
        project_id: {
          bsonType: 'objectId',
        },
        user_id: {
          bsonType: 'objectId'
        },
        status: {
          enum: ['acepted', 'rejected']
        },
        enrollmentDate: {
          bsonType: 'date'
        },
        egressDate: {
          bsonType: 'date'
        }
      }
    }
  }
});

// Create unique index for project_id and user_id
db.getCollection(collection).createIndex({ project_id: 1, user_id: 1 }, { unique: true, name: '_project_user_' });

const enrollments = [
  {
    "project_id": db.Projects.findOne({name: 'Proyecto 1'}, {_id: 1})._id,
    "user_id": db.Users.findOne({email: 'jlarboleda2@misena.edu.co'}, {_id: 1})._id
  },
  {
    "project_id": db.Projects.findOne({name: 'Proyecto 1'}, {_id: 1})._id,
    "user_id": db.Users.findOne({email: 'j.felipe.co.98@gmail.com'})._id
  },
  {
    "project_id": db.Projects.findOne({name: 'Proyecto 2'}, {_id: 1})._id,
    "user_id": db.Users.findOne({email: 'jlarboleda2@misena.edu.co'})._id
  },
  {
    "project_id": db.Projects.findOne({name: 'Proyecto 3'}, {_id: 1})._id,
    "user_id": db.Users.findOne({email: 'j.felipe.co.98@gmail.com'})._id
  },
  {
    "project_id": db.Projects.findOne({name: 'Proyecto 4'}, {_id: 1})._id,
    "user_id": db.Users.findOne({email: 'j.felipe.co.98@gmail.com'})._id
  },
];

// Insert enrollments
db.getCollection(collection).insertMany(enrollments);

// advances collection
collection = 'Advances'

// Drop advances collection
db.getCollection(collection).drop();

// Create advances collection
db.createCollection(collection, {
  validator: {
    $jsonSchema: {
      required: ['project_id', 'addDate', 'description', 'observations'],
      properties: {
        project_id: {
          bsonType: 'objectId',
        },
        addDate: {
          bsonType: 'date'
        },
        description: {
          bsonType: 'string'
        },
        observations: {
          bsonType: 'string'
        }
      }
    }
  }
});

const advances = [
  {
    "project_id": db.Projects.findOne({name: 'Proyecto 1'}, {_id: 1})._id,
    "addDate": new Date(),
    "description": 'Descripcion',
    "observations": 'Observaciones',
  },
  {
    "project_id": db.Projects.findOne({name: 'Proyecto 2'}, {_id: 1})._id,
    "addDate": new Date(),
    "description": 'Descripcion',
    "observations": 'Observaciones',
  },
  {
    "project_id": db.Projects.findOne({name: 'Proyecto 3'}, {_id: 1})._id,
    "addDate": new Date(),
    "description": 'Descripcion',
    "observations": 'Observaciones',
  },
  {
    "project_id": db.Projects.findOne({name: 'Proyecto 4'}, {_id: 1})._id,
    "addDate": new Date(),
    "description": 'Descripcion',
    "observations": 'Observaciones',
  }
];

// Insert advances
db.getCollection(collection).insertMany(advances);